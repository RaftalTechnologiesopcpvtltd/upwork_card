# Generated by Django 5.1.5 on 2025-05-07 06:13

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import taggit.managers
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),
    ]

    operations = [
        migrations.CreateModel(
            name='Contactus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('about', models.TextField()),
                ('company_address', models.TextField()),
                ('company_phone', models.CharField(max_length=20)),
                ('company_email', models.EmailField(max_length=254)),
            ],
        ),
        migrations.CreateModel(
            name='FAQ',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.CharField(max_length=255)),
                ('answer', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Pricing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price_heading', models.CharField(max_length=100)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('desc', models.TextField()),
                ('duration_in_days', models.PositiveIntegerField(default=30)),
                ('price_feature1', models.CharField(default='', max_length=100)),
                ('price_feature2', models.CharField(default='', max_length=100)),
                ('price_feature3', models.CharField(default='', max_length=100)),
                ('price_feature4', models.CharField(default='', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('website_name', models.CharField(max_length=255, null=True)),
                ('website_url', models.URLField(null=True)),
                ('product_link', models.URLField(null=True)),
                ('product_title', models.CharField(max_length=255, null=True)),
                ('product_images', models.TextField(null=True)),
                ('product_price_currency', models.CharField(max_length=10, null=True)),
                ('selling_type', models.CharField(default='', max_length=10, null=True)),
                ('product_price', models.DecimalField(decimal_places=2, max_digits=10, null=True)),
                ('current_bid_price', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, null=True)),
                ('current_bid_currency', models.CharField(default='USD', max_length=10, null=True)),
                ('current_bid_count', models.IntegerField(default=0, null=True)),
                ('description', models.TextField(null=True)),
                ('condition', models.CharField(max_length=255, null=True)),
                ('condition_id', models.CharField(max_length=100, null=True)),
                ('condition_descriptors', models.TextField(null=True)),
                ('condition_values', models.TextField(null=True)),
                ('condition_additional_info', models.TextField(null=True)),
                ('product_availability_status', models.CharField(max_length=100, null=True)),
                ('product_availability_quantity', models.IntegerField(default=0, null=True)),
                ('product_sold_quantity', models.IntegerField(default=0, null=True)),
                ('product_remaining_quantity', models.IntegerField(default=0, null=True)),
                ('shipping_cost', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, null=True)),
                ('shipping_currency', models.CharField(default='USD', max_length=10, null=True)),
                ('shipping_service_code', models.CharField(max_length=100, null=True)),
                ('shipping_carrier_code', models.CharField(max_length=100, null=True)),
                ('shipping_type', models.CharField(max_length=100, null=True)),
                ('additional_shipping_cost_per_unit', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, null=True)),
                ('additional_shipping_cost_currency', models.CharField(default='USD', max_length=10, null=True)),
                ('shipping_cost_type', models.CharField(max_length=100, null=True)),
                ('estimated_arrival', models.CharField(max_length=255, null=True)),
                ('brand', models.CharField(max_length=255, null=True)),
                ('category', models.CharField(max_length=255, null=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('auction_id', models.CharField(max_length=100, null=True)),
                ('bid_count', models.IntegerField(default=0, null=True)),
                ('certified_seller', models.BooleanField(default=False, null=True)),
                ('favorited_count', models.IntegerField(default=0, null=True)),
                ('highest_bidder', models.CharField(max_length=255, null=True)),
                ('listing_id', models.CharField(max_length=100, null=True)),
                ('integer_id', models.IntegerField(null=True)),
                ('is_owner', models.BooleanField(default=False, null=True)),
                ('listing_type', models.CharField(max_length=100, null=True)),
                ('lot_string', models.CharField(max_length=100, null=True)),
                ('slug', models.SlugField(null=True)),
                ('starting_price', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, null=True)),
                ('starting_price_currency', models.CharField(default='USD', max_length=10, null=True)),
                ('is_closed', models.BooleanField(default=False, null=True)),
                ('user_bid_status', models.CharField(max_length=100, null=True)),
                ('user_max_bid', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, null=True)),
                ('status', models.CharField(max_length=100, null=True)),
                ('return_terms_returns_accepted', models.BooleanField(default=False, null=True)),
                ('return_terms_refund_method', models.CharField(max_length=100, null=True)),
                ('return_terms_return_shipping_cost_payer', models.CharField(max_length=100, null=True)),
                ('return_terms_return_period_value', models.IntegerField(default=0, null=True)),
                ('return_terms_return_period_unit', models.CharField(max_length=50, null=True)),
                ('payment_methods', models.TextField(null=True)),
                ('quantity_used_for_estimate', models.IntegerField(default=1, null=True)),
                ('min_estimated_delivery_date', models.DateField(null=True)),
                ('max_estimated_delivery_date', models.DateField(null=True)),
                ('buying_options', models.TextField(null=True)),
                ('minimum_price_to_bid', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, null=True)),
                ('minimum_price_currency', models.CharField(default='USD', max_length=10, null=True)),
                ('unique_bidder_count', models.IntegerField(default=0, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Slidder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='slidder/')),
                ('heading', models.CharField(max_length=100)),
                ('text', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_number', models.CharField(blank=True, max_length=15)),
                ('country_code', models.CharField(blank=True, choices=[('+1', '+1 (US/Canada)'), ('+91', '+91 (India)'), ('+86', '+86 (China)'), ('+81', '+81 (Japan)'), ('+49', '+49 (Germany)'), ('+33', '+33 (France)'), ('+39', '+39 (Italy)'), ('+34', '+34 (Spain)'), ('+55', '+55 (Brazil)'), ('+52', '+52 (Mexico)'), ('+7', '+7 (Russia)'), ('+27', '+27 (South Africa)'), ('+234', '+234 (Nigeria)'), ('+254', '+254 (Kenya)'), ('+54', '+54 (Argentina)'), ('+57', '+57 (Colombia)'), ('+65', '+65 (Singapore)'), ('+64', '+64 (New Zealand)'), ('+353', '+353 (Ireland)'), ('+46', '+46 (Sweden)'), ('+47', '+47 (Norway)'), ('+358', '+358 (Finland)'), ('+45', '+45 (Denmark)'), ('+48', '+48 (Poland)'), ('+351', '+351 (Portugal)'), ('+30', '+30 (Greece)'), ('+90', '+90 (Turkey)'), ('+971', '+971 (United Arab Emirates)'), ('+966', '+966 (Saudi Arabia)'), ('+972', '+972 (Israel)'), ('+852', '+852 (Hong Kong)'), ('+886', '+886 (Taiwan)'), ('+63', '+63 (Philippines)'), ('+66', '+66 (Thailand)'), ('+60', '+60 (Malaysia)'), ('+84', '+84 (Vietnam)'), ('+92', '+92 (Pakistan)'), ('+93', '+93 (Afghanistan)'), ('+94', '+94 (Sri Lanka)'), ('+95', '+95 (Myanmar)'), ('+98', '+98 (Iran)'), ('+212', '+212 (Morocco)'), ('+213', '+213 (Algeria)'), ('+216', '+216 (Tunisia)'), ('+218', '+218 (Libya)'), ('+220', '+220 (Gambia)'), ('+221', '+221 (Senegal)'), ('+222', '+222 (Mauritania)'), ('+223', '+223 (Mali)'), ('+224', '+224 (Guinea)'), ('+225', '+225 (Ivory Coast)'), ('+226', '+226 (Burkina Faso)'), ('+227', '+227 (Niger)'), ('+228', '+228 (Togo)'), ('+229', '+229 (Benin)'), ('+230', '+230 (Mauritius)'), ('+231', '+231 (Liberia)'), ('+232', '+232 (Sierra Leone)'), ('+233', '+233 (Ghana)'), ('+234', '+234 (Nigeria)'), ('+235', '+235 (Chad)'), ('+236', '+236 (Central African Republic)'), ('+237', '+237 (Cameroon)'), ('+238', '+238 (Cape Verde)'), ('+239', '+239 (São Tomé and Príncipe)'), ('+240', '+240 (Equatorial Guinea)'), ('+241', '+241 (Gabon)'), ('+242', '+242 (Congo)'), ('+243', '+243 (Democratic Republic of the Congo)'), ('+244', '+244 (Angola)'), ('+245', '+245 (Guinea-Bissau)'), ('+246', '+246 (British Indian Ocean Territory)'), ('+248', '+248 (Seychelles)'), ('+250', '+250 (Rwanda)'), ('+251', '+251 (Ethiopia)'), ('+252', '+252 (Somalia)'), ('+253', '+253 (Djibouti)'), ('+254', '+254 (Kenya)'), ('+255', '+255 (Tanzania)'), ('+256', '+256 (Uganda)'), ('+257', '+257 (Burundi)'), ('+258', '+258 (Mozambique)'), ('+260', '+260 (Zambia)'), ('+261', '+261 (Madagascar)'), ('+262', '+262 (Réunion)'), ('+263', '+263 (Zimbabwe)'), ('+264', '+264 (Namibia)'), ('+265', '+265 (Malawi)'), ('+266', '+266 (Lesotho)'), ('+267', '+267 (Botswana)'), ('+268', '+268 (Eswatini)'), ('+269', '+269 (Comoros)'), ('+290', '+290 (Saint Helena)'), ('+291', '+291 (Eritrea)'), ('+297', '+297 (Aruba)'), ('+298', '+298 (Faroe Islands)'), ('+299', '+299 (Greenland)'), ('+350', '+350 (Gibraltar)'), ('+351', '+351 (Portugal)'), ('+352', '+352 (Luxembourg)'), ('+353', '+353 (Ireland)'), ('+354', '+354 (Iceland)'), ('+355', '+355 (Albania)'), ('+356', '+356 (Malta)'), ('+357', '+357 (Cyprus)'), ('+358', '+358 (Finland)'), ('+359', '+359 (Bulgaria)'), ('+370', '+370 (Lithuania)'), ('+371', '+371 (Latvia)'), ('+372', '+372 (Estonia)'), ('+373', '+373 (Moldova)'), ('+374', '+374 (Armenia)'), ('+375', '+375 (Belarus)'), ('+376', '+376 (Andorra)'), ('+377', '+377 (Monaco)'), ('+378', '+378 (San Marino)'), ('+379', '+379 (Vatican City)'), ('+380', '+380 (Ukraine)'), ('+381', '+381 (Serbia)'), ('+382', '+382 (Montenegro)'), ('+383', '+383 (Kosovo)'), ('+385', '+385 (Croatia)'), ('+386', '+386 (Slovenia)'), ('+387', '+387 (Bosnia and Herzegovina)'), ('+389', '+389 (North Macedonia)'), ('+420', '+420 (Czech Republic)'), ('+421', '+421 (Slovakia)'), ('+423', '+423 (Liechtenstein)'), ('+500', '+500 (Falkland Islands)'), ('+501', '+501 (Belize)'), ('+502', '+502 (Guatemala)'), ('+503', '+503 (El Salvador)'), ('+504', '+504 (Honduras)'), ('+505', '+505 (Nicaragua)'), ('+506', '+506 (Costa Rica)'), ('+507', '+507 (Panama)'), ('+508', '+508 (Saint Pierre and Miquelon)'), ('+509', '+509 (Haiti)'), ('+590', '+590 (Guadeloupe)'), ('+591', '+591 (Bolivia)'), ('+592', '+592 (Guyana)'), ('+593', '+593 (Ecuador)'), ('+594', '+594 (French Guiana)'), ('+595', '+595 (Paraguay)'), ('+596', '+596 (Martinique)'), ('+597', '+597 (Suriname)'), ('+598', '+598 (Uruguay)'), ('+599', '+599 (Netherlands Antilles)')], max_length=5)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('first_name', models.CharField(blank=True, max_length=30)),
                ('last_name', models.CharField(blank=True, max_length=30)),
                ('category', models.CharField(blank=True, max_length=50)),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('prefer not to say', 'Prefer Not to Say')], max_length=20)),
                ('address', models.TextField(blank=True, default='')),
                ('city', models.CharField(blank=True, default='', max_length=100)),
                ('country', models.CharField(blank=True, default='', max_length=100)),
                ('zip_code', models.CharField(blank=True, default='', max_length=20)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='BlogPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('image', models.ImageField(blank=True, null=True, upload_to='blog_images/')),
                ('video', models.FileField(default='videos/default_video.mp4', upload_to='blog_videos/')),
                ('quote', models.TextField(blank=True, null=True)),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('approved', models.BooleanField(default=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='landingpage.comment')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='landingpage.blogpost')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MyListing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_title', models.CharField(max_length=255, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Favourites',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='landingpage.product')),
            ],
        ),
        migrations.CreateModel(
            name='SearchHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('query', models.CharField(max_length=255)),
                ('marketplaces', models.TextField(blank=True, default='', help_text='Comma-separated list of marketplaces searched')),
                ('location', models.CharField(max_length=255)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='search_histories', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=False)),
                ('subscription_id', models.CharField(blank=True, max_length=100, null=True)),
                ('customer_id', models.CharField(blank=True, max_length=100, null=True)),
                ('session_id', models.CharField(blank=True, max_length=100, null=True)),
                ('payment_status', models.CharField(blank=True, max_length=20, null=True)),
                ('interval', models.CharField(default='month', max_length=50)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='landingpage.pricing')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
